package com.fpt.gsu25se47.schoolpsychology.tools;

import com.fpt.gsu25se47.schoolpsychology.dto.response.SupportProgramDetail;
import com.fpt.gsu25se47.schoolpsychology.dto.response.SupportProgramPPResponse;
import com.fpt.gsu25se47.schoolpsychology.dto.response.SupportProgramResponse;
import com.fpt.gsu25se47.schoolpsychology.model.Account;
import com.fpt.gsu25se47.schoolpsychology.model.enums.Role;
import com.fpt.gsu25se47.schoolpsychology.service.inter.AccountService;
import com.fpt.gsu25se47.schoolpsychology.service.inter.SupportProgramService;
import lombok.RequiredArgsConstructor;
import org.springframework.ai.tool.annotation.Tool;
import org.springframework.ai.tool.annotation.ToolParam;
import org.springframework.security.authorization.AuthorizationDeniedException;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@RequiredArgsConstructor
public class SupportProgramTools {

    private final AccountService accountService;
    private final SupportProgramService supportProgramService;

    @Tool(
            description = "Tr·∫£ v·ªÅ danh s√°ch c√°c ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ t√¢m l√Ω. " +
                    "KHI HI·ªÇN THI K·∫æT QU·∫¢: " +
                    "- S·ª≠ d·ª•ng format: 'üìã **[T√™n program]** (ID: [id]) - [th√¥ng tin kh√°c]' " +
                    "- Lu√¥n hi·ªÉn th·ªã ID trong ngo·∫∑c ƒë∆°n sau t√™n ƒë·ªÉ user c√≥ th·ªÉ tham chi·∫øu " +
                    "- M·ªói ch∆∞∆°ng tr√¨nh hi·ªÉn th·ªã: ID, t√™n, th·ªùi gian, ƒë·ªãa ƒëi·ªÉm, ng∆∞·ªùi ph·ª• tr√°ch " +
                    "- K·∫øt th√∫c b·∫±ng 'B·∫°n mu·ªën xem chi ti·∫øt ch∆∞∆°ng tr√¨nh n√†o?' " +
                    "N·∫øu c√≥ l·ªói: gi·∫£i th√≠ch t√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v·ªõi l·ªùi xin l·ªói."
    )
    public List<SupportProgramResponse> getAllSupportPrograms() {

        return supportProgramService.getAllSupportPrograms();
    }

    @Tool(
            description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ t√¢m l√Ω. " +
                    "C√≥ th·ªÉ t√¨m b·∫±ng ID (s·ªë) ho·∫∑c t√™n ch∆∞∆°ng tr√¨nh (chu·ªói). " +
                    "V√≠ d·ª•: getSupportProgramDetails(5) ho·∫∑c getSupportProgramDetails('Ch∆∞∆°ng tr√¨nh ABC')"
    )
    public SupportProgramDetail getSupportProgramById(String identifier) {

        try {
            Integer id = Integer.parseInt(identifier);
            return supportProgramService.getSupportProgramById(id);
        } catch (NumberFormatException e) {
            List<SupportProgramResponse> programs = supportProgramService.getAllSupportPrograms();
            Integer foundId = programs.stream()
                    .filter(p -> p.getName().equalsIgnoreCase(identifier.trim()) ||
                            p.getName().toLowerCase().contains(identifier.toLowerCase().trim()))
                    .map(SupportProgramResponse::getId)
                    .findFirst()
                    .orElseThrow(() -> new RuntimeException(
                            "Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng tr√¨nh v·ªõi t√™n: " + identifier +
                                    "Vui l√≤ng ki·ªÉm tra l·∫°i t√™n ch∆∞∆°ng tr√¨nh"
                    ));

            return supportProgramService.getSupportProgramById(foundId);
        }
    }

    @Tool(
            name = "getRecommendedSupportPrograms",
            description = "Tr·∫£ v·ªÅ danh s√°ch c√°c ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ t√¢m l√Ω ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t cho h·ªçc sinh c·ª• th·ªÉ " +
                    "d·ª±a tr√™n t√¨nh tr·∫°ng s·ª©c kh·ªèe t√¢m l√Ω ho·∫∑c k·∫øt qu·∫£ kh·∫£o s√°t c·ªßa h·ªçc sinh ƒë√≥. " +
                    "CH·ªà s·ª≠ d·ª•ng khi user h·ªèi v·ªÅ ch∆∞∆°ng tr√¨nh ph√π h·ª£p/ƒë·ªÅ xu·∫•t cho h·ªçc sinh c·ª• th·ªÉ. " +
                    "KHI HI·ªÇN TH·ªä K·∫æT QU·∫¢: " +
                    "- Format: 'üéØ **ƒê·ªÅ xu·∫•t cho [T√™n h·ªçc sinh]**' " +
                    "- M·ªói ch∆∞∆°ng tr√¨nh: '‚≠ê **[T√™n]** - [L√Ω do ƒë·ªÅ xu·∫•t ng·∫Øn g·ªçn]' " +
                    "- Gi·∫£i th√≠ch t·∫°i sao ch∆∞∆°ng tr√¨nh n√†y ph√π h·ª£p v·ªõi h·ªçc sinh " +
                    "- S·∫Øp x·∫øp theo ƒë·ªô ∆∞u ti√™n/ph√π h·ª£p " +
                    "L∆∞u √Ω: Ch·ªâ STUDENT role c√≥ th·ªÉ s·ª≠ d·ª•ng."
    )
    public List<SupportProgramResponse> getSuggestSupportProgram() {

        Account account = accountService.getCurrentAccount();
        if (account.getRole() != Role.STUDENT) {
            throw new AuthorizationDeniedException("Ch·ªâ c√≥ student m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c ch·ª©c nƒÉng n√†y");
        }
        return supportProgramService.getSuggestSupportProgram(account.getId());
    }

    @Tool(
            name = "getStudentSupportPrograms",
            description = "Tr·∫£ v·ªÅ danh s√°ch c√°c ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ t√¢m l√Ω m√† h·ªçc sinh ƒëang tham gia ho·∫∑c ƒë√£ tham gia. " +
                    "CH·ªà s·ª≠ d·ª•ng khi user h·ªèi v·ªÅ c√°c ch∆∞∆°ng tr√¨nh c·ªßa h·ªçc sinh c·ª• th·ªÉ. " +
                    "KHI HI·ªÇN TH·ªä K·∫æT QU·∫¢: " +
                    "- Format: 'üë®‚Äçüéì **Ch∆∞∆°ng tr√¨nh c·ªßa [T√™n h·ªçc sinh]**' " +
                    "- M·ªói ch∆∞∆°ng tr√¨nh: 'üìö **[T√™n]** - [Tr·∫°ng th√°i tham gia] | ‚è∞ [Th·ªùi gian]' " +
                    "- Nh√≥m theo tr·∫°ng th√°i: ƒêang tham gia / ƒê√£ ho√†n th√†nh / S·∫Øp t·ªõi " +
                    "- Hi·ªÉn th·ªã ti·∫øn ƒë·ªô ho·∫∑c k·∫øt qu·∫£ n·∫øu c√≥ " +
                    "- K·∫øt th√∫c: 'B·∫°n mu·ªën xem chi ti·∫øt ch∆∞∆°ng tr√¨nh n√†o?' " +
                    "Quy·ªÅn truy c·∫≠p: STUDENT (ch·ªâ xem c·ªßa ch√≠nh m√¨nh), PARENTS (xem c·ªßa con), "
    )
    public List<SupportProgramPPResponse> getStudentSupportPrograms(
            @ToolParam(description = "ID c·ªßa h·ªçc sinh c·∫ßn xem danh s√°ch ch∆∞∆°ng tr√¨nh")
            Integer studentId) {
        Account account = accountService.getCurrentAccount();
        if (account.getRole() != Role.STUDENT && account.getRole() != Role.PARENTS) {
            throw new AuthorizationDeniedException("Ch·ªâ c√≥ student v√† parents m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c ch·ª©c nƒÉng n√†y");
        }
        return supportProgramService.getSupportProgramsByStudentId(studentId);
    }
}
